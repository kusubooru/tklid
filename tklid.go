// Package tklid provides anime-flavored, tickletastic, suitably random and
// reasonably unique human readable ids.
//
// Inspired by: https://github.com/a-type/adjective-adjective-animal
package tklid

import (
	"math/rand"
	"sort"
	"strings"
)

// New creates a new random, human readable id. Each id consists of different
// word parts separated by hyphens. The generated ids should be safe to be used
// as folder names.
//
// The most common way to use this function is:
//
//    New(time.Now().UnixNano())
func New(seed int64) string {
	r := rand.New(rand.NewSource(seed))
	return strings.Join(randWords(r, allWords), "-")
}

func randWord(r *rand.Rand, words words) string {
	return words[r.Intn(len(words))]
}

func randWords(r *rand.Rand, allWords []words) []string {
	randWords := make([]string, 0, len(allWords))
	for _, words := range allWords {
		randWords = append(randWords, randWord(r, words))
	}
	return randWords
}

const safeIDLength = 255 // character length safe for folder name

// Validate receives an id, validates that the number of its parts is the same
// as the number of parts used for the ids generated by this package and that
// each of its parts uses a word from this package's dictionary. It also makes
// sure that the id length is safe to be used as a folder name.
//
// This funcion can be used to make sure that an id (which could be created by
// another source) is as valid as any id generated by this package.
func Validate(id string) bool {
	if len(id) > safeIDLength {
		return false
	}
	parts := strings.Split(id, "-")
	if len(parts) != len(allWords) {
		return false
	}
	for i, part := range parts {
		if !isInWords(allWords[i], part) {
			return false
		}
	}
	return true
}

func isInWords(words words, word string) bool {
	sort.Sort(byName(words))
	i := sort.Search(len(words), func(i int) bool { return words[i] >= word })
	if i < len(words) && words[i] == word {
		return true
	}
	return false
}
